{"version":3,"sources":["assets/img/icon-check.png","assets/img/icon-remove.png","store/reducer.js","store/actions.js","components/Todo/js/Todo.js","components/TodoForm/js/TodoForm.js","components/App/js/App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","todos","text","isCompleted","reducer","state","action","type","UpdatedAfterRemove","filter","todo","index","todoId","UpdatedAfterAdd","concat","todoValue","UpdatedAfterCompleted","map","todoIndex","completeTodo","removeTodo","className","style","textDecoration","onClick","src","require","alt","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","trim","htmlFor","id","onChange","target","connect","todoList","dispatch","key","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.280c23f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-check.7b06eb31.png\";","module.exports = __webpack_public_path__ + \"static/media/icon-remove.34c80988.png\";","import * as actionTypes from './actions';\n\nconst initialState = {\n    todos: [\n        {\n            text: \"Learn about React\",\n            isCompleted: false\n        },\n        {\n            text: \"Build a todo app\",\n            isCompleted: false\n        },\n        {\n            text: \"Run through code review for todo app\",\n            isCompleted: false\n        }\n    ]\n};\n\nconst reducer = ( state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.REMOVE_TODO:\n            const UpdatedAfterRemove = state.todos.filter((todo, index) => index !== action.todoId);\n            return {\n                ...state,\n                todos: UpdatedAfterRemove\n            };\n        case actionTypes.ADD_TODO:\n            const UpdatedAfterAdd = state.todos.concat({\n                text: action.todoValue,\n                isCompleted: false\n            });\n            return {\n                ...state,\n                todos: UpdatedAfterAdd\n            };\n        case actionTypes.COMPLETE_TODO:\n            const UpdatedAfterCompleted = state.todos.map((todo, index) => {\n                if (index === action.todoIndex) {\n                    todo.isCompleted = true\n                    return todo\n                }\n                return todo\n            })\n            return {\n                ...state,\n                todos: UpdatedAfterCompleted\n            };\n    }\n    return state;\n};\n\nexport default reducer;\n","export const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO'\nexport const ADD_TODO = 'ADD_TODO'","import React from 'react';\nimport '../css/Todo.css';\n\nconst todo = ({ todo, index, completeTodo, removeTodo }) => {\n  return (\n    <li\n      className=\"todo\"\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n    >\n      <span>{todo.text}</span>\n      <div className=\"button-container\">\n        <button className=\"button button--complete\" onClick={() => completeTodo(index)}>\n          <img className=\"icon\" src={require('../../../assets/img/icon-check.png')} alt=\"Checkmark\"/>\n        </button>\n        <button className=\"button button--remove\" onClick={() => removeTodo(index)}>\n          <img className=\"icon\" src={require('../../../assets/img/icon-remove.png')} alt=\"Checkmark\"/>\n        </button>\n      </div>\n    </li>\n  );\n}\n\nexport default todo;\n","import React, { useState } from 'react';\nimport '../css/TodoForm.css';\n\nconst TodoForm = ({ addTodo }) => {\n  const [value, setValue] = useState(\"\");\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (!value || value.trim() === '') return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <label htmlFor=\"item\">Add Todo:</label>\n      <input\n        id=\"item\"\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../../store/actions';\n\nimport '../css/App.css';\nimport Todo from '../../Todo/js/Todo';\nimport TodoForm from '../../TodoForm/js/TodoForm';\n\nconst App = ({ todoList, completeTodo, removeTodo, addTodo }) => {\n  \n  let todos = null;\n  \n  if (todoList) {\n    todos = (\n      <ul className=\"todo-list\">\n        {todoList && todoList.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </ul>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"bg\">\n        {todos}\n      </div>\n    </div>\n  );\n}\n\n// setting up action\nconst mapDispatchToProps = dispatch => {\n  return {\n    removeTodo: (id) => dispatch({type: actionTypes.REMOVE_TODO, todoId: id}),\n    addTodo: (value) => dispatch({type: actionTypes.ADD_TODO, todoValue: value}),\n    completeTodo: (index) => dispatch({type: actionTypes.COMPLETE_TODO, todoIndex: index}),\n  };\n};\n\n// setting up subscription\nconst mapStateToProps = state => {\n  return {\n    todoList: state.todos\n  };\n};\n\n// setting up connect\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nimport './index.css';\nimport App from './components/App/js/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}